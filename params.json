{"name":"Syncify","tagline":"A radically simpler way to deal with asynchronous functions in javascript","body":"# Syncify.js\r\n\r\n\r\nSyncify is an innovative alternative to [Async.js](https://github.com/caolan/async), [Step](https://github.com/creationix/step) and [Node Fibers](https://github.com/laverdet/node-fibers). It allows you to deal with \"Callback Hell\" in a very simple way.\r\n\r\nIt works just like Node Fibers in that it ***completely eliminates the need for callbacks***. But, unlike Node Fibers, it also ***works on the browser!***\r\n\r\n[![Syncify Intro Video](https://dl.dropboxusercontent.com/u/497895/__permalinks/syncify-youtube-screenshot.png)](http://www.youtube.com/watch?v=hvlBpWlpdFo)\r\n\r\n* [Intro video](http://www.youtube.com/watch?v=hvlBpWlpdFo) ( 13 minutes )\r\n* [Introductory article at Airpair](http://airpair.com/javascript/syncify-tutorial)\r\n\r\n\r\n## Example\r\n\r\n### Without Syncify\r\nThis is a typical composite function that calls an Ajax service several times:\r\n\r\n```javascript\r\nfunction getFullName( id, cb ){\r\n  ajax( \"/user/\" + id + \"/name\", function( err, name ){\r\n    if ( err ){\r\n      cb( err );\r\n    } else {\r\n      ajax( \"/user/\" + id + \"/lastname\", function( err, lastname ){\r\n        if ( err ){\r\n          cb( err )\r\n        } else {\r\n          cb( null, name + \" \" + lastname )\r\n        }\r\n      })\r\n    }\r\n  })\r\n}\r\n```\r\n\r\nUff. That's a lot of nested callbacks. Let's see if we can do better.\r\n\r\n### With Syncify\r\n\r\n```javascript\r\n// 1. syncify any async function you want to use\r\najax = syncify( ajax )\r\n\r\n// 2. you can now forget about callbacks when dealing with ajax()\r\nfunction getFullName( id ){\r\n\treturn ajax( \"/user/\" + id + \"/name\" ) + \" \" + ajax( \"/user/\" + id + \"/lastname\" )\r\n}\r\n\r\n// 3. unsyncify the resulting function\r\n//    ( so that it takes a callback again )\r\ngetFullName = syncify.revert( getFullName )\r\n\r\n```\r\n\r\nBoth functions ( the one with syncify and the one without syncify ) are equivalent. You can call them like this:\r\n\r\n```javascript\r\ngetFullName( \"aldo\", function( err, res ){ console.log( res )})\r\n```\r\n\r\nIsn't that awesome?\r\n\r\nSyncify allowed us to ***magically get rid of callbacks*** while creating a composite function.\r\nIt is not just cleaner, but it also allows us to ***take advantage of the full power of Javascript***.\r\n\r\nYou can use any function. For example:\r\n\r\n```javascript\r\nfunction getNameUC( id ){\r\n\treturn ajax(\"/user/\" + id + \"/name\").toUpperCase()\r\n}\r\n```\r\n\r\nYou can even process a collection using Array.map()!\r\n\r\n```javascript\r\nfunction getFriendNames( id ){\r\n\treturn ajax(\"/user/\" + id + \"/friends\").map( function( friend ){\r\n\t\treturn ajax(\"/user/\" + friend + \"/name\" ) + \" \" + ajax(\"/user/\" + friend + \"/lastname\" )\r\n  })\r\n}\r\n```\r\n\r\nYou can literally do anything. ***Syncify allows you to escape from Callback Hell so you can continue coding in regular Javascript***.\r\n\r\n## Limitations\r\n\r\nWell. To be honest. You cannot do just **anything**. ***You cannot use Syncify to deal with functions that mutate application state***. That means you can exclusively use it with read-only functions.\r\n\r\nWhile this sounds like a limitation, in practice it is not. Syncify is much better at composing queries ( functions that fetch data and draw the UI ) while [Async.js](https://github.com/caolan/async) is better at composing business logic. You can combine them.\r\n\r\n##\r\n\r\nTo compensate for this limitation, Syncify has grown some cool tricks. For example, transparent concurrency.\r\n\r\n## Concurrency\r\n\r\nYou can make the above method much faster by using syncify.parallel:\r\n\r\n```javascript\r\nfunction getFriendNames( id ){\r\n  var friends = ajax(\"/user/\" + id + \"/friends\")\r\n  syncify.parallel(function(){\r\n    // all requests issued within this block will be parallelized\r\n    friends.map(function(){\r\n      return ajax(\"/user/\" + id + \"/name\" ) + \" \" + ajax(\"/user/\" + id + \"/lastname\" )\r\n    })\r\n  })\r\n}\r\n```\r\n\r\n## Quickstart\r\n\r\n### Get the code\r\n\r\n#### Using NPM\r\n\r\n```shell\r\nnpm install syncify\r\n```\r\n\r\n#### Load Javascript on the browser\r\n\r\n**WE NEED MORE STARS ON THIS PROJECT TO GET IT INTO CDNJS!! CLICK \"STAR\" ABOVE**\r\n\r\nYou can find ready to use .js and .min.js files in the [/build](https://github.com/aldonline/syncify/tree/master/build) directory.\r\n\r\n\r\n# API\r\n\r\n### syncify( asyncFunc: Function ): Function\r\n\r\nTakes an async function and returns a syncified version\r\n\r\n### syncify.revert( syncifiedFunc: Function ): Function\r\n\r\nTakes a syncified function ( or a function that contains nested syncified functions ) and returns an equivalent async function ( one that takes a callback ). This function is the counterpart/opposite of `syncify()`.\r\n\r\n### syncify.parallel( block:Function )\r\n\r\nSee video ( top of the page )\r\n\r\n### syncify.sequence( block:Function )\r\n\r\nSee video ( top of the page )\r\n\r\n\r\n# Caveats\r\n\r\n* Functions must be idempotent\r\n* Their arguments must be JSON serializable\r\n* There are a few known bugs ( see [issue #18](https://github.com/aldonline/syncify/issues/18) ). But other than that the code has been used in a dozen apps in production for over 4 months.\r\n\r\n# How does it work?\r\n\r\nI will dig deep into this when I find the time. For now you can find more info on the [article at AirPair](http://airpair.com/javascript/syncify-tutorial).\r\n\r\nThis module uses [Native Reactivity](https://github.com/aldonline/reactivity) under the covers. This means you can combine it transparently with other Native Reactivity libraries. ( TODO: links ).\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}